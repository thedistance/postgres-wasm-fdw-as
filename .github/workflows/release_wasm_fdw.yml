name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Push events to matching wasm fdw tag, i.e. v1.0.2

permissions:
  contents: write

jobs:
  release:
    name: Create Wasm FDW Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm install
          npm list assemblyscript

      - name: Create package-lock.json
        run: npm install --package-lock-only

      - name: Create build directory
        run: mkdir -p build

      - name: List files before build
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Contents of assembly directory:"
          ls -la assembly/

      - name: Build WebAssembly
        run: |
          echo "Running asbuild:release command..."
          npm run asbuild:release
          echo "Build command completed."

      - name: List files after build
        run: |
          echo "Contents of current directory:"
          ls -la
          echo "Contents of build directory:"
          ls -la build/

      - name: Calculate Wasm file checksum
        uses: jmgilman/actions-generate-checksum@v1
        with:
          method: sha256
          output: checksum.txt
          patterns: |
            ./build/release.wasm

      - name: Extract package info
        id: extract
        env:
          TAG: ${{ github.ref_name }}
        run: |
          PROJECT=`node -e "console.log(require('./package.json').name)"`
          VERSION=`echo "${TAG}" | sed -E 's/v(.*)/\1/'`
          CHECKSUM=`head -1 checksum.txt | sed -E 's/^(.*) .*/\1/'`
          echo "PROJECT=$PROJECT" >> "$GITHUB_OUTPUT"
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"
          echo "CHECKSUM=$CHECKSUM" >> "$GITHUB_OUTPUT"
          echo "Project: $PROJECT"
          echo "Version: $VERSION"
          echo "Checksum: $CHECKSUM"

      - name: Create README.txt
        env:
          PROJECT: ${{ steps.extract.outputs.PROJECT }}
          VERSION: ${{ steps.extract.outputs.VERSION }}
          CHECKSUM: ${{ steps.extract.outputs.CHECKSUM }}
        run: |
          cat > README.txt <<EOF
          To use this Wasm foreign data wrapper on Supabase, create a foreign table like below,

          create extension if not exists wrappers with schema extensions;

          create foreign data wrapper wasm_wrapper
            handler wasm_fdw_handler
            validator wasm_fdw_validator;

          create server example_server
            foreign data wrapper wasm_wrapper
            options (
              fdw_package_url 'https://github.com/${GITHUB_REPOSITORY}/releases/download/v${VERSION}/${PROJECT}.wasm',
              fdw_package_name '${PROJECT}',
              fdw_package_version '${VERSION}',
              fdw_package_checksum '${CHECKSUM}',
              api_url 'https://api.github.com'
            );

          create schema github;

          create foreign table github.events (
            id text,
            type text,
            actor jsonb,
            repo jsonb,
            payload jsonb,
            public boolean,
            created_at timestamp
          )
            server example_server
            options (
              object 'events',
              rowid_column 'id'
            );

          For more details, please visit https://fdw.dev.
          EOF

      - name: Prepare release assets
        id: prepare_assets
        run: |
          WASM_FILE="${{ steps.extract.outputs.PROJECT }}.wasm"
          echo "Copying WebAssembly file..."
          cp ./build/release.wasm "./${WASM_FILE}"
          ls -la "./${WASM_FILE}"
          echo "File size: $(stat -c%s ./${WASM_FILE}) bytes"
          echo "WASM_FILE=${WASM_FILE}" >> "$GITHUB_OUTPUT"
          
          # Create a directory for release assets
          mkdir -p release_assets
          cp README.txt release_assets/
          cp checksum.txt release_assets/
          cp "./${WASM_FILE}" release_assets/
          
          echo "Files prepared for release:"
          ls -la release_assets/

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2.2.1
        with:
          generate_release_notes: true
          make_latest: true
          files: release_assets/* 